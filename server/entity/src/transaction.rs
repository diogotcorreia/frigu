//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "transaction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub buyer: i32,
    pub seller: i32,
    pub quantity: i32,
    pub unit_price: i32,
    pub paid_date: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Buyer",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    User2,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Seller",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    User1,
}

impl ActiveModelBehavior for ActiveModel {
    // Will be triggered before insert / update
    fn before_save(self, insert: bool) -> Result<Self, DbErr> {
        if self.unit_price.as_ref() < &0 {
            Err(DbErr::Custom(format!(
                "[before_save] UnitPrice cannot be negative, insert: {}",
                insert
            )))
        } else if self.quantity.as_ref() <= &0 {
            Err(DbErr::Custom(format!(
                "[before_save] Quantity cannot be zero nor negative, insert: {}",
                insert
            )))
        } else {
            Ok(self)
        }
    }
}
